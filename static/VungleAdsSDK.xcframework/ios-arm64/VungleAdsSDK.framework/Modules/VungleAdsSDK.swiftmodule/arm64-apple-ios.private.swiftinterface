// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name VungleAdsSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFAudio
import AVFoundation
import AdSupport
import AppTrackingTransparency
import AudioToolbox
import CoreTelephony
import Dispatch
import Foundation
import Network
import StoreKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
@_exported import VungleAdsSDK
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
import zlib
@available(*, deprecated, message: "VungleBannerDelegate will be deprecated and replaced by VungleBannerViewDelegate protocol.")
@objc public protocol VungleBannerDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func bannerAdDidLoad(_ banner: VungleAdsSDK.VungleBanner)
  @objc optional func bannerAdDidFailToLoad(_ banner: VungleAdsSDK.VungleBanner, withError: Foundation.NSError)
  @objc optional func bannerAdWillPresent(_ banner: VungleAdsSDK.VungleBanner)
  @objc optional func bannerAdDidPresent(_ banner: VungleAdsSDK.VungleBanner)
  @objc optional func bannerAdDidFailToPresent(_ banner: VungleAdsSDK.VungleBanner, withError: Foundation.NSError)
  @objc optional func bannerAdWillClose(_ banner: VungleAdsSDK.VungleBanner)
  @objc optional func bannerAdDidClose(_ banner: VungleAdsSDK.VungleBanner)
  @objc optional func bannerAdDidTrackImpression(_ banner: VungleAdsSDK.VungleBanner)
  @objc optional func bannerAdDidClick(_ banner: VungleAdsSDK.VungleBanner)
  @objc optional func bannerAdWillLeaveApplication(_ banner: VungleAdsSDK.VungleBanner)
}
@available(*, deprecated, message: "BannerSize will be depricated and will be replaced by VungleAdSize")
@objc public enum BannerSize : Swift.Int {
  case regular = 0
  case short = 1
  case leaderboard = 2
  case mrec = 3
  public init?(rawValue: Swift.Int)
  @available(*, deprecated, message: "BannerSize will be depricated and will be replaced by VungleAdSize")
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(*, deprecated, message: "VungleBanner class will be deprecated and replaced by VungleBannerView class.")
@objc public class VungleBanner : VungleAdsSDK.BasePublicAd {
  @objc weak public var delegate: (any VungleAdsSDK.VungleBannerDelegate)?
  @objc public init(placementId: Swift.String, size: VungleAdsSDK.BannerSize)
  @objc public init(placementId: Swift.String, vungleAdSize: VungleAdsSDK.VungleAdSize)
  @objc public func getBannerSize() -> CoreFoundation.CGSize
  @objc public func present(on publisherView: UIKit.UIView)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class VungleAdsExtras : ObjectiveC.NSObject {
  @objc final public func set(watermark: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol VungleNativeDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func nativeAdDidLoad(_ native: VungleAdsSDK.VungleNative)
  @objc optional func nativeAdDidFailToLoad(_ native: VungleAdsSDK.VungleNative, withError: Foundation.NSError)
  @objc optional func nativeAdDidFailToPresent(_ native: VungleAdsSDK.VungleNative, withError: Foundation.NSError)
  @objc optional func nativeAdDidTrackImpression(_ native: VungleAdsSDK.VungleNative)
  @objc optional func nativeAdDidClick(_ native: VungleAdsSDK.VungleNative)
}
@objc public enum NativeAdOptionsPosition : Swift.Int {
  case topLeft = 1
  case topRight = 2
  case bottomLeft = 3
  case bottomRight = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class VungleNative : VungleAdsSDK.BasePublicAd {
  @objc weak public var delegate: (any VungleAdsSDK.VungleNativeDelegate)?
  @objc public var title: Swift.String {
    get
  }
  @objc public var bodyText: Swift.String {
    get
  }
  @objc public var callToAction: Swift.String {
    get
  }
  @objc public var adStarRating: Swift.Double {
    get
  }
  @objc public var sponsoredText: Swift.String {
    get
  }
  @objc public var iconImage: UIKit.UIImage? {
    get
  }
  @objc public var adOptionsPosition: VungleAdsSDK.NativeAdOptionsPosition
  @objc public init(placementId: Swift.String)
  @objc public func registerViewForInteraction(view: UIKit.UIView, mediaView: VungleAdsSDK.MediaView, iconImageView: UIKit.UIImageView?, viewController: UIKit.UIViewController?)
  @objc public func registerViewForInteraction(view: UIKit.UIView, mediaView: VungleAdsSDK.MediaView, iconImageView: UIKit.UIImageView?, viewController: UIKit.UIViewController?, clickableViews: [UIKit.UIView]?)
  @objc public func unregisterView()
  @objc public func performCTA()
  @objc public func getMediaAspectRatio() -> CoreFoundation.CGFloat
  @objc deinit
}
@objc public protocol VungleInterstitialDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func interstitialAdDidLoad(_ interstitial: VungleAdsSDK.VungleInterstitial)
  @objc optional func interstitialAdDidFailToLoad(_ interstitial: VungleAdsSDK.VungleInterstitial, withError: Foundation.NSError)
  @objc optional func interstitialAdWillPresent(_ interstitial: VungleAdsSDK.VungleInterstitial)
  @objc optional func interstitialAdDidPresent(_ interstitial: VungleAdsSDK.VungleInterstitial)
  @objc optional func interstitialAdDidFailToPresent(_ interstitial: VungleAdsSDK.VungleInterstitial, withError: Foundation.NSError)
  @objc optional func interstitialAdWillClose(_ interstitial: VungleAdsSDK.VungleInterstitial)
  @objc optional func interstitialAdDidClose(_ interstitial: VungleAdsSDK.VungleInterstitial)
  @objc optional func interstitialAdDidTrackImpression(_ interstitial: VungleAdsSDK.VungleInterstitial)
  @objc optional func interstitialAdDidClick(_ interstitial: VungleAdsSDK.VungleInterstitial)
  @objc optional func interstitialAdWillLeaveApplication(_ interstitial: VungleAdsSDK.VungleInterstitial)
}
@_inheritsConvenienceInitializers @objc public class VungleInterstitial : VungleAdsSDK.BasePublicAd {
  @objc weak public var delegate: (any VungleAdsSDK.VungleInterstitialDelegate)?
  @objc public init(placementId: Swift.String)
  @objc public func present(with viewController: UIKit.UIViewController)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class BasePublicAd : ObjectiveC.NSObject {
  @objc public var appId: Swift.String {
    @objc get
  }
  @objc public var placementId: Swift.String {
    @objc get
  }
  @objc public var eventId: Swift.String {
    @objc get
  }
  @objc public var creativeId: Swift.String {
    @objc get
  }
  @objc deinit
  @objc public func set(extras: VungleAdsSDK.VungleAdsExtras)
  @objc public func canPlayAd() -> Swift.Bool
  @objc public func load(_ bidPayload: Swift.String? = nil)
}
@objc public protocol VungleRewardedDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func rewardedAdDidLoad(_ rewarded: VungleAdsSDK.VungleRewarded)
  @objc optional func rewardedAdDidFailToLoad(_ rewarded: VungleAdsSDK.VungleRewarded, withError: Foundation.NSError)
  @objc optional func rewardedAdWillPresent(_ rewarded: VungleAdsSDK.VungleRewarded)
  @objc optional func rewardedAdDidPresent(_ rewarded: VungleAdsSDK.VungleRewarded)
  @objc optional func rewardedAdDidFailToPresent(_ rewarded: VungleAdsSDK.VungleRewarded, withError: Foundation.NSError)
  @objc optional func rewardedAdWillClose(_ rewarded: VungleAdsSDK.VungleRewarded)
  @objc optional func rewardedAdDidClose(_ rewarded: VungleAdsSDK.VungleRewarded)
  @objc optional func rewardedAdDidTrackImpression(_ rewarded: VungleAdsSDK.VungleRewarded)
  @objc optional func rewardedAdDidClick(_ rewarded: VungleAdsSDK.VungleRewarded)
  @objc optional func rewardedAdWillLeaveApplication(_ rewarded: VungleAdsSDK.VungleRewarded)
  @objc optional func rewardedAdDidRewardUser(_ rewarded: VungleAdsSDK.VungleRewarded)
}
@_inheritsConvenienceInitializers @objc public class VungleRewarded : VungleAdsSDK.BasePublicAd {
  @objc weak public var delegate: (any VungleAdsSDK.VungleRewardedDelegate)?
  @objc public init(placementId: Swift.String)
  @objc public func present(with viewController: UIKit.UIViewController)
  @objc public func setUserId(userId: Swift.String)
  @objc public func setAlertTitleText(_ text: Swift.String)
  @objc public func setAlertBodyText(_ text: Swift.String)
  @objc public func setAlertCloseButtonText(_ text: Swift.String)
  @objc public func setAlertContinueButtonText(_ text: Swift.String)
  @objc deinit
}
@objc public enum ConsentStatus : Swift.Int {
  case accepted = 0
  case denied = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class VungleAds : ObjectiveC.NSObject {
  @objc public static var sdkVersion: Swift.String {
    @objc get
  }
  @objc public static let firstPartyData: VungleAdsSDK.FirstPartyData
  @objc final public class func initWithAppId(_ appId: Swift.String, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc final public class func isInitialized() -> Swift.Bool
  @objc final public class func isInLine(_ placementId: Swift.String) -> Swift.Bool
  @objc public static func getBiddingToken() -> Swift.String
  @objc final public class func setIntegrationName(_ integrationName: Swift.String, version: Swift.String)
  @objc final public class func setDebugLoggingEnabled(_ isDebugLoggingEnabled: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class FirstPartyData : ObjectiveC.NSObject, Swift.Codable {
  @objc final public func setAge(_ age: Swift.Int)
  @objc final public func setLengthOfResidenceYears(_ lengthOfResidenceYears: Foundation.Decimal)
  @objc final public func setMedianHomeValueUsd(_ medianHomeValueUsd: Swift.Int)
  @objc final public func setMonthlyHousingPaymentUsd(_ monthlyHousingPaymentUsd: Swift.Int)
  @objc final public func setCountry(_ country: Swift.String?)
  @objc final public func setDma(_ dma: Swift.Int)
  @objc final public func setRegionState(_ regionState: Swift.String?)
  @objc final public func setEarningsByPlacement(_ earningsByPlacement: Foundation.Decimal)
  @objc final public func setIsUserAPurchaser(_ isUserAPurchaser: Swift.Bool)
  @objc final public func setIsUserASubscriber(_ isUserASubscriber: Swift.Bool)
  @objc final public func setLast30DaysMeanSpendUsd(_ last30DaysMeanSpendUsd: Foundation.Decimal)
  @objc final public func setLast30DaysMedianSpendUsd(_ last30DaysMedianSpendUsd: Foundation.Decimal)
  @objc final public func setLast30DaysPlacementFillRate(_ last30DaysPlacementFillRate: Foundation.Decimal)
  @objc final public func setLast30DaysTotalSpendUsd(_ last30DaysTotalSpendUsd: Foundation.Decimal)
  @objc final public func setLast30DaysUserLtvUsd(_ last30DaysUserLtvUsd: Foundation.Decimal)
  @objc final public func setLast30DaysUserPltvUsd(_ last30DaysUserPltvUsd: Foundation.Decimal)
  @objc final public func setLast7DaysMeanSpendUsd(_ last7DaysMeanSpendUsd: Foundation.Decimal)
  @objc final public func setLast7DaysMedianSpendUsd(_ last7DaysMedianSpendUsd: Foundation.Decimal)
  @objc final public func setLast7DaysPlacementFillRate(_ last7DaysPlacementFillRate: Foundation.Decimal)
  @objc final public func setLast7DaysTotalSpendUsd(_ last7DaysTotalSpendUsd: Foundation.Decimal)
  @objc final public func setLast7DaysUserLtvUsd(_ last7DaysUserLtvUsd: Foundation.Decimal)
  @objc final public func setLast7DaysUserPltvUsd(_ last7DaysUserPltvUsd: Foundation.Decimal)
  @objc final public func setTopNAdomain(_ topNAdomain: [Swift.String])
  @objc final public func setTotalEarningsUsd(_ totalEarningsUsd: Foundation.Decimal)
  @objc final public func setFriends(_ friends: [Swift.String]?)
  @objc final public func setHealthPercentile(_ healthPercentile: Swift.Int)
  @objc final public func setInGamePurchases(_ inGamePurchases: Foundation.Decimal)
  @objc final public func setLevelPercentile(_ levelPercentile: Foundation.Decimal)
  @objc final public func setPage(_ page: Swift.String?)
  @objc final public func setSessionStartTime(_ sessionStartTime: Foundation.Date?)
  @objc final public func setSessionDuration(_ sessionDuration: Swift.Int)
  @objc final public func setSignupDate(_ signupDate: Foundation.Date?)
  @objc final public func setTimeSpent(_ timeSpent: Swift.Int)
  @objc final public func setUserId(_ userId: Swift.String?)
  @objc final public func setUserLevelPercentile(_ userLevelPercentile: Swift.Int)
  @objc final public func setUserScorePercentile(_ userScorePercentile: Foundation.Decimal)
  @objc final public func addCustomData(_ key: Swift.String, value: Swift.String)
  @objc final public func setCustomData(_ data: [Swift.String : Swift.String])
  public init(from decoder: any Swift.Decoder) throws
  @objc final public func clearAll()
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class MediaView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol VungleBannerViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func bannerAdDidLoad(_ bannerView: VungleAdsSDK.VungleBannerView)
  @objc optional func bannerAdWillPresent(_ bannerView: VungleAdsSDK.VungleBannerView)
  @objc optional func bannerAdDidPresent(_ bannerView: VungleAdsSDK.VungleBannerView)
  @objc optional func bannerAdDidFail(_ bannerView: VungleAdsSDK.VungleBannerView, withError: Foundation.NSError)
  @objc optional func bannerAdWillClose(_ bannerView: VungleAdsSDK.VungleBannerView)
  @objc optional func bannerAdDidClose(_ bannerView: VungleAdsSDK.VungleBannerView)
  @objc optional func bannerAdDidTrackImpression(_ bannerView: VungleAdsSDK.VungleBannerView)
  @objc optional func bannerAdDidClick(_ bannerView: VungleAdsSDK.VungleBannerView)
  @objc optional func bannerAdWillLeaveApplication(_ bannerView: VungleAdsSDK.VungleBannerView)
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class VungleBannerView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any VungleAdsSDK.VungleBannerViewDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public init(placementId: Swift.String, vungleAdSize: VungleAdsSDK.VungleAdSize)
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency public func load(_ bidPayload: Swift.String? = nil)
  @objc @_Concurrency.MainActor @preconcurrency public func set(extras: VungleAdsSDK.VungleAdsExtras)
  @objc @_Concurrency.MainActor @preconcurrency public var appId: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var placementId: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var eventId: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var creativeId: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public func getBannerSize() -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToSuperview()
}
@objc public enum VungleError : Swift.Int {
  case unknownError = 0
  case invalidAppID = 2
  case currentlyInitializing = 3
  case alreadyInitialized = 4
  case sdkNotInitialized = 6
  case userAgentError = 7
  case apiRequestError = 101
  case apiResponseDataError = 102
  case apiResponseDecodeError = 103
  case apiFailedStatusCode = 104
  case invalidTemplateURL = 105
  case invalidRequestBuilderError = 106
  case templateUnzipError = 109
  case invalidCtaURL = 110
  case invalidAssetURL = 111
  case assetRequestError = 112
  case assetResponseDataError = 113
  case assetWriteError = 114
  case invalidIndexURL = 115
  case gzipEncodeError = 116
  case assetFailedStatusCode = 117
  case protobufSerializationError = 118
  case jsonEncodeError = 119
  case tpatError = 121
  case invalidAdsEndpoint = 122
  case invalidRiEndpoint = 123
  case invalidLogErrorEndpoint = 124
  case invalidMetricsEndpoint = 125
  case assetFailedInsufficientSpace = 126
  case assetFailedMaxSpaceExceeded = 127
  case invalidTpatKey = 128
  case emptyTpatError = 129
  case mraidDownloadJsError = 130
  case mraidJsWriteFailed = 131
  case omsdkDownloadJsError = 132
  case omsdkJsWriteFailed = 133
  case storeRegionCodeError = 134
  case invalidConfigResponse = 135
  case privacyURLError = 136
  case tpatRetryFailed = 137
  case configRefreshFailed = 138
  case invalidEventIDError = 200
  case invalidPlacementID = 201
  case adConsumed = 202
  case adIsLoading = 203
  case adAlreadyLoaded = 204
  case adIsPlaying = 205
  case adAlreadyFailed = 206
  case placementAdTypeMismatch = 207
  case invalidBidPayload = 208
  case invalidJsonBidPayload = 209
  case adNotLoaded = 210
  case placementSleep = 212
  case invalidAdunitBidPayload = 213
  case invalidGzipBidPayload = 214
  case adResponseEmpty = 215
  case adResponseInvalidTemplateType = 216
  case adResponseTimedOut = 217
  case mraidJsDoesNotExist = 218
  case mraidJsCopyFailed = 219
  case adResponseRetryAfter = 220
  case adLoadFailRetryAfter = 221
  case invalidWaterfallPlacementID = 222
  case staleCachedResponse = 223
  case mraidError = 301
  case invalidIfaStatus = 302
  case adExpired = 304
  case mraidBridgeError = 305
  case adExpiredOnPlay = 307
  case adWinNotificationError = 308
  case assetFailedToDelete = 309
  case adHtmlFailedToLoad = 310
  case mraidJsCallEmpty = 311
  case deeplinkOpenFailed = 312
  case evaluateJavascriptFailed = 313
  case linkCommandOpenFailed = 314
  case jsonParamsEncodeError = 315
  case generateJsonDataError = 316
  case adClosedTemplateError = 317
  case adClosedMissingHeartbeat = 318
  case silentModeMonitorError = 319
  case webviewError = 320
  case concurrentPlaybackUnsupported = 400
  case bannerViewInvalidSize = 500
  case nativeAssetError = 600
  case webViewWebContentProcessDidTerminate = 2000
  case webViewFailedNavigation = 2001
  case storeKitLoadError = 2002
  case omsdkCopyError = 2003
  case storeOverlayLoadError = 2004
  case reachabilityInitializationFailed = 2005
  case unknownRadioAccessTechnology = 2006
  case storeKitPresentationError = 2007
  case storeOverlayPresentationError = 2008
  case invalidPlayParameter = 2009
  case outOfMemory = 3001
  case vungleOitCreationError = 4000
  case adNoFill = 10001
  case adLoadTooFrequently = 10002
  case adServerError = 20001
  case adPublisherMismatch = 30001
  case adInternalIntegrationError = 30002
  case configNotFoundError = 30003
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class VunglePrivacySettings : ObjectiveC.NSObject {
  @objc public static func setGDPRStatus(_ optIn: Swift.Bool)
  @objc public static func setGDPRMessageVersion(_ version: Swift.String)
  @objc public static func setCCPAStatus(_ optIn: Swift.Bool)
  @objc public static func setCOPPAStatus(_ isUserCoppa: Swift.Bool)
  @objc public static func setPublishIdfv(_ publish: Swift.Bool)
  @objc deinit
}
public struct CompressionLevel : Swift.RawRepresentable {
  public let rawValue: Swift.Int32
  public static let noCompression: VungleAdsSDK.CompressionLevel
  public static let bestSpeed: VungleAdsSDK.CompressionLevel
  public static let bestCompression: VungleAdsSDK.CompressionLevel
  public static let defaultCompression: VungleAdsSDK.CompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct GzipError : Swift.Error {
  public enum Kind : Swift.Equatable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: VungleAdsSDK.GzipError.Kind, b: VungleAdsSDK.GzipError.Kind) -> Swift.Bool
  }
  public let kind: VungleAdsSDK.GzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
extension Foundation.Data {
  public var isGzipped: Swift.Bool {
    get
  }
  public func gzipped(level: VungleAdsSDK.CompressionLevel = .defaultCompression) throws -> Foundation.Data
  public func gunzipped() throws -> Foundation.Data
}
@objc public enum VungleAdSizeType : Swift.Int {
  case regularBannerSizeType = 1, shortBannerSizeType, leaderboardSizeType, mrecSizeType, flexibleHeightSizeType, fixedSizeType
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class VungleAdSize : ObjectiveC.NSObject {
  @objc final public let size: CoreFoundation.CGSize
  @objc final public let type: VungleAdsSDK.VungleAdSizeType
  @objc public static let VungleAdSizeBannerRegular: VungleAdsSDK.VungleAdSize
  @objc public static let VungleAdSizeBannerShort: VungleAdsSDK.VungleAdSize
  @objc public static let VungleAdSizeLeaderboard: VungleAdsSDK.VungleAdSize
  @objc public static let VungleAdSizeMREC: VungleAdsSDK.VungleAdSize
  @objc deinit
}
extension VungleAdsSDK.VungleAdSize {
  @objc dynamic public class func VungleAdSizeWithWidth(_ width: CoreFoundation.CGFloat) -> VungleAdsSDK.VungleAdSize
  @objc dynamic public class func VungleAdSizeFromCGSize(_ size: CoreFoundation.CGSize) -> VungleAdsSDK.VungleAdSize
  @objc dynamic public class func VungleValidAdSizeFromCGSize(size: CoreFoundation.CGSize, placementId: Swift.String) -> VungleAdsSDK.VungleAdSize
}
@available(*, deprecated, message: "BannerSize will be depricated and will be replaced by VungleAdSize")
extension VungleAdsSDK.BannerSize : Swift.Equatable {}
@available(*, deprecated, message: "BannerSize will be depricated and will be replaced by VungleAdSize")
extension VungleAdsSDK.BannerSize : Swift.Hashable {}
@available(*, deprecated, message: "BannerSize will be depricated and will be replaced by VungleAdSize")
extension VungleAdsSDK.BannerSize : Swift.RawRepresentable {}
extension VungleAdsSDK.NativeAdOptionsPosition : Swift.Equatable {}
extension VungleAdsSDK.NativeAdOptionsPosition : Swift.Hashable {}
extension VungleAdsSDK.NativeAdOptionsPosition : Swift.RawRepresentable {}
extension VungleAdsSDK.ConsentStatus : Swift.Equatable {}
extension VungleAdsSDK.ConsentStatus : Swift.Hashable {}
extension VungleAdsSDK.ConsentStatus : Swift.RawRepresentable {}
extension VungleAdsSDK.VungleError : Swift.Equatable {}
extension VungleAdsSDK.VungleError : Swift.Hashable {}
extension VungleAdsSDK.VungleError : Swift.RawRepresentable {}
extension VungleAdsSDK.VungleAdSizeType : Swift.Equatable {}
extension VungleAdsSDK.VungleAdSizeType : Swift.Hashable {}
extension VungleAdsSDK.VungleAdSizeType : Swift.RawRepresentable {}
